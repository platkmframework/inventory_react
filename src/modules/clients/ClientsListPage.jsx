/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


import { useEffect, useState} from "react"

import { useSearch } from "../../components/hooks/useSearch";
import { Search } from "../../components/search/pages/Search";
import { useMessage } from "../../components/hooks/useMessage";
import { ConfirmDialog } from "../../components/dialog/ConfirmDialog";
import { useFetch } from "../../components/hooks/useFetch";
import { Message } from "../../components/message/Message";
import { converToLabel } from "../../js/util";

export const ClientsListPage = ({action, setAction, open, setOpen})  => {

    // Control de ordenación
    const  {clean, success, error, msg} = useMessage();
    const [openDelConfirm, setOpenDelConfirm] = useState({value:'', index:'', open:false})

    const useSearchHook = useSearch({url:'clients/criteria', error});
    const {search, result, handleSort, filter} = useSearchHook;
    const {post, put, get, del} = useFetch();

    useEffect(()=>{ 
        search();
    }, [])

    useEffect(()=>{
        if(action.value == "search"){
            search();
        }
    }, [action])


    const handleYes = async( event)=>{
        event.preventDefault();  
        clean();
     
        del({url:'clients/' + openDelConfirm.value },
			(status, data)=>{ 
				success('record removed')
				search()
                setAction({...action, value:'cleanForm', id:openDelConfirm.value})
			}, (status, msg)=>{
				error(msg)
			} 
		)  
    }

    const handleDelete = async (event, id) => {
        event.preventDefault();  
        setOpenDelConfirm({...openDelConfirm, value:id, open:true});
    }

    const handleEdit = async (event, id) => {
        event.preventDefault();  
        setAction({...action, value:'formEdit', id:id})
       setOpen(true)
    }
 
    const onNewRecordForm = (event) => {
        event.preventDefault();  
        setAction({...action, value:'formNew', id:''})
        setOpen(true)
    }

    return (
        <>
        <div className="container">
            <div className="card">
	<div>
                    <button  type="button" className="btn" onClick={(event)=>onNewRecordForm(event)}>New</button>
                </div>
                <div><Message msg={msg}/></div> 
                <h2 className="card-title"> Clients List </h2> 
                <Search useSearch={useSearchHook}>
                    <table className="table table-striped table-hover">
                        <thead className="thead-light">
                            <tr>
   <th scope="col" onClick={() => handleSort("name")} style={{ cursor: "pointer" }}>{converToLabel('name')}
                                    {
                                        filter.order === "name" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("contact")} style={{ cursor: "pointer" }}>{converToLabel('contact')}
                                    {
                                        filter.order === "contact" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("address")} style={{ cursor: "pointer" }}>{converToLabel('address')}
                                    {
                                        filter.order === "address" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("phone")} style={{ cursor: "pointer" }}>{converToLabel('phone')}
                                    {
                                        filter.order === "phone" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("email")} style={{ cursor: "pointer" }}>{converToLabel('email')}
                                    {
                                        filter.order === "email" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
                                <th scope="col"></th> 
                            </tr>
                        </thead>
                        <tbody>
                        {
                            result.recordList?.map((row, i) =>(
				<tr key={row.clientId  + "_" + i}>
					<td>{row.name} </td> 
					<td>{row.contact} </td> 
					<td>{row.address} </td> 
					<td>{row.phone} </td> 
					<td>{row.email} </td> 
                                    			<td>
                                        				<button className="btn" onClick={(event) => handleEdit(event, row.clientId)}>Edit</button> &nbsp;
                                        				<button  className="btn btn-danger" onClick={(event) => handleDelete(event, row.clientId)}>Remove</button>
                                    			</td>
                                		</tr> 
                            ))
                        }
                        </tbody>
                    </table>
                </Search>   
            </div>
        </div> 
        <ConfirmDialog openDelConfirm = {openDelConfirm} handleYes={handleYes} />       
        </>
    )
}