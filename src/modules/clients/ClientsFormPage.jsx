/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


import React, { useState, useEffect } from "react";

import { useFetch } from "../../components/hooks/useFetch";
import { useForm } from "../../components/hooks/useForm";
import { useMessage } from "../../components/hooks/useMessage";
import { Message } from "../../components/message/Message";
import { converToLabel } from "../../js/util";


export const ClientsFormPage = ({action, setAction})  => {
  const {formState, setFormState, onInputChange, onResetForm} = useForm({"clientId": "","name": "","contact": "","address": "","phone": "","email": ""})	
  const {post, put, get} = useFetch();
  const  {clean, error, success, msg} = useMessage();


    useEffect(()=>{
		if(action.value == 'cleanForm'){
			if(action.id != undefined && action.id != null  && action.id != '' ){
				if(formState.clientId  == action.id ){
					onResetForm();
				}
			}else{
				onResetForm();
			}
		}else if(action.value == 'formEdit'){
			load(action.id);
			
		}

    }, [action])


	const load = (id)=>{
		get({url:'clients/' + id},
			(status, data)=>{ 
				setFormState(data)
				clean();
			}, (status, msg)=>{
			  error(msg)
			} 
		) 
	}
	
	const handleSumbit = (event)=>{
		event.preventDefault();
		if(formState.clientId == '') 
			post({url:'clients', data:{"name": formState.name,"contact": formState.contact,"address": formState.address,"phone": formState.phone,"email": formState.email}},
				(status, data)=>{ 
					success('Record created') 
					setFormState({...formState, categoryId:data.value})
					setAction({...action, value:'search'})
				}, (status, msg)=>{
					error(msg)
				} 
			) 
		else 
			put({url:'clients', data:{"clientId": formState.clientId,"name": formState.name,"contact": formState.contact,"address": formState.address,"phone": formState.phone,"email": formState.email}},
				(status, data)=>{ 
					success('Record updated') 
					setAction({...action, value:'search'})
				}, (status, msg)=>{
					error(msg)
				} 
			)  
	}


  return (
    <div className="container">
      <div className="card">
        <div><Message msg={msg}/></div> 
        <h2 className="card-title">
          {formState.clientId != '' ? "Edit Clients" : "Create Clients"}
        </h2> 
<form onSubmit={(event) => handleSumbit(event)}>
            <div className="row">
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('name')}*</label>
              <input type="text" 
		id="name"
		name="name"
		className="form-control" 
		placeholder="value for name" 
                        maxLength="255"
                         value={formState.name}  
	        onChange={(event)=>{onInputChange(event, 'name')}}
required  />
               
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('contact')}</label>
              <input type="text" 
		id="contact"
		name="contact"
		className="form-control" 
		placeholder="value for contact" 
                        maxLength="255"
                         value={formState.contact}  
	        onChange={(event)=>{onInputChange(event, 'contact')}}
  />
               
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('address')}</label>
              <input type="text" 
		id="address"
		name="address"
		className="form-control" 
		placeholder="value for address" 
                        maxLength="2147483647"
                         value={formState.address}  
	        onChange={(event)=>{onInputChange(event, 'address')}}
  />
               
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('phone')}</label>
              <input type="text" 
		id="phone"
		name="phone"
		className="form-control" 
		placeholder="value for phone" 
                        maxLength="20"
                         value={formState.phone}  
	        onChange={(event)=>{onInputChange(event, 'phone')}}
  />
               
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('email')}</label>
              <input type="text" 
		id="email"
		name="email"
		className="form-control" 
		placeholder="value for email" 
                        maxLength="100"
                         value={formState.email}  
	        onChange={(event)=>{onInputChange(event, 'email')}}
  />
               
</div>
	</div> 
	<div style={{ marginTop: "1rem" }}>
		<button type="submit" className="btn btn-accent">
              		{formState.clientId!= '' ? "Update" : "Create"}
            		</button>&nbsp;
		<button type="button" className="btn" onClick={onResetForm}>Clean</button>
	</div>
        </form>
     </div>
   </div>
  );
};
 
