/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/



import { useEffect, useState} from "react"

import { useSearch } from "../../components/hooks/useSearch";
import { Search } from "../../components/search/pages/Search";
import { useMessage } from "../../components/hooks/useMessage";
import { ConfirmDialog } from "../../components/dialog/ConfirmDialog";
import { useFetch } from "../../components/hooks/useFetch";
import { Message } from "../../components/message/Message";
import { useForm } from "../../components/hooks/useForm";

import { converToLabel } from "../../js/util";

export const ValtabListFormPage = () => {

  const  {clean, success, error, msg} = useMessage();
  const [openDelConfirm, setOpenDelConfirm] = useState({value:'', index:'', open:false})

  const useSearchHook = useSearch({url:'valtab/criteria', error});
  const {search, result, handleSort, filter} = useSearchHook;
  const {post, put, get, del} = useFetch();
  const {formState:formStateEDIT, setFormState:setFormStateEDIT, onInputChange:onInputChangeEDIT, onResetForm:onResetFormEDIT} = useForm({"valtabId": "","values": "","code": "","description": "","defaultValue": ""})
  const {formState, setFormState, onInputChange, onResetForm} = useForm({"valtabId": "","values": "","code": "","description": "","defaultValue": ""})

    // Para controlar la categoría en edición
    const [editingRecordId, setEditingRecordId] = useState(null);

  useEffect(()=>{
      clean()
      search({orderType:'asc', order:'name', pageCount:20});
  }, [])


  //---------------delete------------
  const handleYes = async( event)=>{
    event.preventDefault();  
    clean();

    del({url:'valtab/' + openDelConfirm.value },
      (status, data)=>{ 
        success('record removed')
        onResetFormEDIT()
        search() 
      }, (status, msg)=>{
        error(msg)
      } 
    )  
  }

  const handleDelete = async (event, id) => {
    event.preventDefault();  
    setOpenDelConfirm({...openDelConfirm, value:id, open:true});
  }
  //---------------END delete---------------------
  //------------------ create update------------------
	const handleSumbitCreate = (event)=>{
		event.preventDefault();
       post({url:'valtab', data:{"values": formState.values,"code": formState.code,"description": formState.description,"defaultValue": formState.defaultValue}},
      (status, data)=>{ 
        success('Record created') 
        onResetForm()
        search()
      }, (status, msg)=>{
        error(msg)
      } 
    )  
	}
  const handleSumbitUpdate = (event)=>{
		event.preventDefault();
      put({url:'valtab', data:{"valtabId": formStateEDIT.valtabId,"values": formStateEDIT.values,"code": formStateEDIT.code,"description": formStateEDIT.description,"defaultValue": formStateEDIT.defaultValue}},
      (status, data)=>{ 
        success('Record updated')  
      }, (status, msg)=>{
        error(msg)
      } 
    )  
  }

  const handleEditRecord = (event, row) => {
    event.preventDefault();
    setEditingRecordId(row.valtabId )
    setFormStateEDIT(row)
  }

  const handleCancelEditRecord = (event) => {
    event.preventDefault();
    setEditingRecordId(null)
    onResetFormEDIT();
  }

  //-------------------end create update-----------------

  return (
    <div className="card">
      <h2 className="card-title">Gestión de Valtab</h2>
      <div><Message msg={msg}/></div> 
      <form onSubmit={(event) => handleSumbitUpdate(event)}> 
        <table className="table">
          <thead>
	<tr>
              <th>{converToLabel('values')}</th>         
              <th>{converToLabel('code')}</th>         
              <th>{converToLabel('description')}</th>         
              <th>{converToLabel('default_value')}</th>         
                <th>Actions</th>  
	</tr>
          </thead>
          <tbody>
            {result.recordList.map((row) => (
              <tr key={row.valtabId}>

                <td>
                  {editingRecordId === row.valtabId ? (
                    <input
                      type="text"
                      value={formStateEDIT.values}
                      onChange={(event)=>{onInputChangeEDIT(event, 'values')}}
required/>
                  ) : (
                    row.values
                  )}
                </td>
                <td>
                  {editingRecordId === row.valtabId ? (
                    <input
                      type="text"
                      value={formStateEDIT.code}
                      onChange={(event)=>{onInputChangeEDIT(event, 'code')}}
required/>
                  ) : (
                    row.code
                  )}
                </td>
                <td>
                  {editingRecordId === row.valtabId ? (
                    <input
                      type="text"
                      value={formStateEDIT.description}
                      onChange={(event)=>{onInputChangeEDIT(event, 'description')}}
/>
                  ) : (
                    row.description
                  )}
                </td>
                <td>
                  {editingRecordId === row.valtabId ? (
                    <input
                      type="text"
                      value={formStateEDIT.defaultValue}
                      onChange={(event)=>{onInputChangeEDIT(event, 'defaultValue')}}
/>
                  ) : (
                    row.defaultValue
                  )}
                </td>
                <td>
                  {editingRecordId === row.valtabId ? (
                    <>
                      <button type="submit" className="btn btn-accent">Save</button>&nbsp;
                      <button className="btn" onClick={(event) => handleCancelEditRecord(event)}>Close</button>
                    </>
                  ) : (
                    <>
                    <button className="btn" onClick={(event) => handleEditRecord(event, row)}>Edit</button>&nbsp;
                    <button className="btn"  onClick={(event) => handleDelete(event, row.valtabId)}>Remove</button>
                    </>
                  )}
                </td>
              </tr>  
            ))}
          </tbody>
        </table>
      </form>
      <form onSubmit={(event) => handleSumbitCreate(event)}>
        <table className="table"> 
          <tbody>
            <tr>
                <td>
                    <input
                      type="text"
                      value={formState.values}
                      onChange={(event)=>{onInputChange(event, 'values')}}
required />                  
                </td>
                <td>
                    <input
                      type="text"
                      value={formState.code}
                      onChange={(event)=>{onInputChange(event, 'code')}}
required />                  
                </td>
                <td>
                    <input
                      type="text"
                      value={formState.description}
                      onChange={(event)=>{onInputChange(event, 'description')}}
 />                  
                </td>
                <td>
                    <input
                      type="text"
                      value={formState.defaultValue}
                      onChange={(event)=>{onInputChange(event, 'defaultValue')}}
 />                  
                </td>
                <td>
                  <button type="submit" className="btn btn-accent">Save</button> 
                </td>
              </tr>

          </tbody>
        </table>
      </form>
      <ConfirmDialog openDelConfirm = {openDelConfirm} handleYes={handleYes} />         
    </div>
  );
}
