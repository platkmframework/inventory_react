/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


import React, { useState, useEffect } from "react";

import { useFetch } from "../../components/hooks/useFetch";
import { useForm } from "../../components/hooks/useForm";
import { useMessage } from "../../components/hooks/useMessage";
import { Message } from "../../components/message/Message";
import { converToLabel } from "../../js/util";


export const BatchEntriesFormPage = ({action, setAction})  => {
  const {formState, setFormState, onInputChange, onResetForm} = useForm({"entryId": "","batchId": "","productId": "","quantity": "","entryDate": "","supplierId": "","userId": ""})	
  const {post, put, get} = useFetch();
  const  {clean, error, success, msg} = useMessage();

  const [listBatches, setListBatches] = useState([])
  const [listProducts, setListProducts] = useState([])
  const [listSuppliers, setListSuppliers] = useState([])
  const [listUsers, setListUsers] = useState([])

    useEffect(()=>{
		if(action.value == 'cleanForm'){
			if(action.id != undefined && action.id != null  && action.id != '' ){
				if(formState.entryId  == action.id ){
					onResetForm();
				}
			}else{
				onResetForm();
			}
		}else if(action.value == 'formEdit'){
			load(action.id);
			
		}
		loadBatches();
		loadProducts();
		loadSuppliers();
		loadUsers();

    }, [action])


	const loadBatches= ()=>{
		get({url:'batches/list'},
			(status, data)=>{ 
				setListBatches(data) 
			}, (status, msg)=>{
			  error(msg)
			} 
		) 
	}


	const loadProducts= ()=>{
		get({url:'products/list'},
			(status, data)=>{ 
				setListProducts(data) 
			}, (status, msg)=>{
			  error(msg)
			} 
		) 
	}


	const loadSuppliers= ()=>{
		get({url:'suppliers/list'},
			(status, data)=>{ 
				setListSuppliers(data) 
			}, (status, msg)=>{
			  error(msg)
			} 
		) 
	}


	const loadUsers= ()=>{
		get({url:'users/list'},
			(status, data)=>{ 
				setListUsers(data) 
			}, (status, msg)=>{
			  error(msg)
			} 
		) 
	}


	const load = (id)=>{
		get({url:'batchentries/' + id},
			(status, data)=>{ 
				setFormState(data)
				clean();
			}, (status, msg)=>{
			  error(msg)
			} 
		) 
	}
	
	const handleSumbit = (event)=>{
		event.preventDefault();
		if(formState.entryId == '') 
			post({url:'batchentries', data:{"batchId": formState.batchId,"productId": formState.productId,"quantity": formState.quantity,"entryDate": formState.entryDate,"supplierId": formState.supplierId,"userId": formState.userId}},
				(status, data)=>{ 
					success('Record created') 
					setFormState({...formState, categoryId:data.value})
					setAction({...action, value:'search'})
				}, (status, msg)=>{
					error(msg)
				} 
			) 
		else 
			put({url:'batchentries', data:{"entryId": formState.entryId,"batchId": formState.batchId,"productId": formState.productId,"quantity": formState.quantity,"entryDate": formState.entryDate,"supplierId": formState.supplierId,"userId": formState.userId}},
				(status, data)=>{ 
					success('Record updated') 
					setAction({...action, value:'search'})
				}, (status, msg)=>{
					error(msg)
				} 
			)  
	}


  return (
    <div className="container">
      <div className="card">
        <div><Message msg={msg}/></div> 
        <h2 className="card-title">
          {formState.entryId != '' ? "Edit BatchEntries" : "Create BatchEntries"}
        </h2> 
<form onSubmit={(event) => handleSumbit(event)}>
            <div className="row">
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('batches')}*</label>
	<select id="batchId"
		name="batchId"
                                    value={formState.batchId}  
		onChange={(event)=>{onInputChange(event, 'batchId')}}
required>

	{

		listBatches.map((elem,i)=>(
			<option key={'Batches_' + i}>{elem.name}</option>
		))
	}

	</select>
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('products')}*</label>
	<select id="productId"
		name="productId"
                                    value={formState.productId}  
		onChange={(event)=>{onInputChange(event, 'productId')}}
required>

	{

		listProducts.map((elem,i)=>(
			<option key={'Products_' + i}>{elem.name}</option>
		))
	}

	</select>
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('quantity')}*</label>
	<input type="number" id="quantity" className="form-control"
	     name="quantity"   
                       value={formState.quantity}  
                       onChange={(event)=>{onInputChange(event, 'quantity')}}
required />
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('entry_date')}</label>
              <input type="text" 
		id="entryDate"
		name="entryDate"
		className="form-control" 
		placeholder="value for entryDate" 
                        maxLength="29"
                         value={formState.entryDate}  
	        onChange={(event)=>{onInputChange(event, 'entryDate')}}
  />
               
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('suppliers')}</label>
	<select id="supplierId"
		name="supplierId"
                                    value={formState.supplierId}  
		onChange={(event)=>{onInputChange(event, 'supplierId')}}
>

	{

		listSuppliers.map((elem,i)=>(
			<option key={'Suppliers_' + i}>{elem.name}</option>
		))
	}

	</select>
</div>
            <div className="col-md-6 mb-3">
              <label className="form-label">{converToLabel('users')}</label>
	<select id="userId"
		name="userId"
                                    value={formState.userId}  
		onChange={(event)=>{onInputChange(event, 'userId')}}
>

	{

		listUsers.map((elem,i)=>(
			<option key={'Users_' + i}>{elem.name}</option>
		))
	}

	</select>
</div>
	</div> 
	<div style={{ marginTop: "1rem" }}>
		<button type="submit" className="btn btn-accent">
              		{formState.entryId!= '' ? "Update" : "Create"}
            		</button>&nbsp;
		<button type="button" className="btn" onClick={onResetForm}>Clean</button>
	</div>
        </form>
     </div>
   </div>
  );
};
 
