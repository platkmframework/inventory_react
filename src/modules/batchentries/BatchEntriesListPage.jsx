/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


import { useEffect, useState} from "react"

import { useSearch } from "../../components/hooks/useSearch";
import { Search } from "../../components/search/pages/Search";
import { useMessage } from "../../components/hooks/useMessage";
import { ConfirmDialog } from "../../components/dialog/ConfirmDialog";
import { useFetch } from "../../components/hooks/useFetch";
import { Message } from "../../components/message/Message";
import { converToLabel } from "../../js/util";

export const BatchEntriesListPage = ({action, setAction})  => {

    // Control de ordenación
    const  {clean, success, error, msg} = useMessage();
    const [openDelConfirm, setOpenDelConfirm] = useState({value:'', index:'', open:false})

    const useSearchHook = useSearch({url:'batchentries/criteria', error});
    const {search, result, handleSort, filter} = useSearchHook;
    const {post, put, get, del} = useFetch();

    useEffect(()=>{ 
        search();
    }, [])

    useEffect(()=>{
        if(action.value == "search"){
            search();
        }
    }, [action])


    const handleYes = async( event)=>{
        event.preventDefault();  
        clean();
     
        del({url:'batchentries/' + openDelConfirm.value },
			(status, data)=>{ 
				success('record removed')
				search()
                setAction({...action, value:'cleanForm', id:openDelConfirm.value})
			}, (status, msg)=>{
				error(msg)
			} 
		)  
    }

    const handleDelete = async (event, id) => {
        event.preventDefault();  
        setOpenDelConfirm({...openDelConfirm, value:id, open:true});
    }

    const handleEdit = async (event, id) => {
        event.preventDefault();  
        setAction({...action, value:'formEdit', id:id})
    }
 

    return (
        <>
        <div className="container">
            <div className="card">
                <div><Message msg={msg}/></div> 
                <h2 className="card-title"> BatchEntries List </h2> 
                <Search useSearch={useSearchHook}>
                    <table className="table table-striped table-hover">
                        <thead className="thead-light">
                            <tr>
   <th scope="col" onClick={() => handleSort("batchId")} style={{ cursor: "pointer" }}>{converToLabel('batch_id')}
                                    {
                                        filter.order === "batch_id" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("productId")} style={{ cursor: "pointer" }}>{converToLabel('product_id')}
                                    {
                                        filter.order === "product_id" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("quantity")} style={{ cursor: "pointer" }}>{converToLabel('quantity')}
                                    {
                                        filter.order === "quantity" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("entryDate")} style={{ cursor: "pointer" }}>{converToLabel('entry_date')}
                                    {
                                        filter.order === "entry_date" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("supplierId")} style={{ cursor: "pointer" }}>{converToLabel('supplier_id')}
                                    {
                                        filter.order === "supplier_id" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
   <th scope="col" onClick={() => handleSort("userId")} style={{ cursor: "pointer" }}>{converToLabel('user_id')}
                                    {
                                        filter.order === "user_id" && (
                                            <span className="sort-indicator">
                                                {filter.orderType === "asc" ? "▲" : "▼"}
                                            </span>
                                        )
                                    }    
                                </th> 
                                <th scope="col"></th> 
                            </tr>
                        </thead>
                        <tbody>
                        {
                            result.recordList?.map((row, i) =>(
				<tr key={row.entryId  + "_" + i}>
					<td>{row.batchId} </td> 
					<td>{row.productId} </td> 
					<td>{row.quantity} </td> 
					<td>{row.entryDate} </td> 
					<td>{row.supplierId} </td> 
					<td>{row.userId} </td> 
                                    			<td>
                                        				<button className="btn" onClick={(event) => handleEdit(event, row.entryId)}>Edit</button> &nbsp;
                                        				<button  className="btn btn-danger" onClick={(event) => handleDelete(event, row.entryId)}>Remove</button>
                                    			</td>
                                		</tr> 
                            ))
                        }
                        </tbody>
                    </table>
                </Search>   
            </div>
        </div> 
        <ConfirmDialog openDelConfirm = {openDelConfirm} handleYes={handleYes} />       
        </>
    )
}